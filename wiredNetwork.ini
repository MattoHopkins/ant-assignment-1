[General]
network = WiredNetwork

sim-time-limit = 120s

*.*.numApps = 1


**.numHosts = ${10..100 step 10}

**.HostA[*].app[0].typename = "UdpApp"
**.HostA[*].app[0].io.localPort = 1000
**.HostA[*].app[0].io.destAddress = "serverB"
#**.HostA[(numHosts/2 + 1)..numHosts].app[0].io.connectAddress = "HostC[0]"
**.HostA[*].app[0].io.destPort = 1000
**.HostA[*].app[0].source.productionInterval = uniform(0s, 20s)
**.HostA[*].app[0].source.packetLength = intuniform(100B, 200B)
**.HostA[*].app[0].source.packetData = intuniform(0, 1)

**.HostB[*].app[0].typename = "UdpApp"
**.HostB[*].app[0].io.destAddress = "serverC"
**.HostB[*].app[0].io.localPort = 1000
#**.HostB[(numHosts/2 + 1)..numHosts].app[0].io.connectAddress = "HostC[0]"
**.HostB[*].app[0].io.destPort = 1000
**.HostB[*].app[0].source.productionInterval = uniform(0s, 20s)
**.HostB[*].app[0].source.packetLength = intuniform(100B, 200B)
**.HostB[*].app[0].source.packetData = intuniform(0, 1)

**.HostC[*].app[0].typename = "UdpApp"
**.HostC[*].app[0].io.destAddress = "serverA"
**.HostC[*].app[0].io.localPort = 1000
#**.HostC[(numHosts/2 + 1)..numHosts].app[0].io.connectAddress = "HostC[0]"
**.HostC[*].app[0].io.destPort = 1000
**.HostC[*].app[0].source.productionInterval = uniform(0s, 20s)
**.HostC[*].app[0].source.packetLength = intuniform(100B, 200B)
**.HostC[*].app[0].source.packetData = intuniform(0, 1)



*.serverA.app[0].typename = "UdpRequestResponseApp"
*.serverA.app[0].io.localPort = 1000
*.serverA.app[0].io.destAddress = "HostC[*]"
*.serverA.app[0].io.destPort = 1000
*.serverA.app[0].sink.tokenGenerator[0].numTokensPerPacket = intuniform(10, 20)
*.serverA.app[0].sink.tokenGenerator[1].numTokensPerPacket = intuniform(5, 10)
*.serverA.app[0].source.provider[0].packetLength = intuniform(100B, 1000B)
*.serverA.app[0].source.provider[0].providingInterval = uniform(0s, 0.2s)
*.serverA.app[0].source.provider[1].packetLength = intuniform(1000B, 10000B)
*.serverA.app[0].source.provider[1].providingInterval = uniform(0s, 0.2s)

*.serverB.app[0].typename = "UdpRequestResponseApp"
*.serverB.app[0].io.localPort = 1000
*.serverB.app[0].io.destAddress = "HostA[*]"
*.serverB.app[0].io.destPort = 1000
*.serverB.app[0].sink.tokenGenerator[0].numTokensPerPacket = intuniform(10, 20)
*.serverB.app[0].sink.tokenGenerator[1].numTokensPerPacket = intuniform(5, 10)
*.serverB.app[0].source.provider[0].packetLength = intuniform(100B, 1000B)
*.serverB.app[0].source.provider[0].providingInterval = uniform(0s, 0.2s)
*.serverB.app[0].source.provider[1].packetLength = intuniform(1000B, 10000B)
*.serverB.app[0].source.provider[1].providingInterval = uniform(0s, 0.2s)


*.serverC.app[0].typename = "UdpRequestResponseApp"
*.serverC.app[0].io.localPort = 1000
*.serverC.app[0].io.destAddress = "HostB[*]"
*.serverC.app[0].io.destPort = 1000
*.serverC.app[0].sink.tokenGenerator[0].numTokensPerPacket = intuniform(10, 20)
*.serverC.app[0].sink.tokenGenerator[1].numTokensPerPacket = intuniform(5, 10)
*.serverC.app[0].source.provider[0].packetLength = intuniform(100B, 1000B)
*.serverC.app[0].source.provider[0].providingInterval = uniform(0s, 0.2s)
*.serverC.app[0].source.provider[1].packetLength = intuniform(1000B, 10000B)
*.serverC.app[0].source.provider[1].providingInterval = uniform(0s, 0.2s)


**.channel.throughput.statistic-recording = true
**.channel.throughput.result-recording-modes = all